{
  "hash": "b476834445ab6ff92bd1328ae307af73",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: '금융공학프로그래밍3, Quiz1'\n---\n\n\n\n## 1. Calculate the following\n\n\n::: {#7aa08bbb .cell execution_count=1}\n``` {.python .cell-code}\nimport math\n```\n:::\n\n\n### (1) 근의 공식 코드 작성\n\n::: {#6e2b4b21 .cell execution_count=2}\n``` {.python .cell-code}\na=2.0;b=-1.0;c=-15.0;\nprint(\n    (-b+math.sqrt(b**2-4*a*c))/(2*a),\n    (-b-math.sqrt(b**2-4*a*c))/(2*a)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n3.0 -2.5\n```\n:::\n:::\n\n\n### (2) 정규분포 확률밀도함수 코드 작성\n\n::: {#afdfed8e .cell execution_count=3}\n``` {.python .cell-code}\nmean=2; std=math.sqrt(3); x=1;\nprint(\n    (1/(math.sqrt(2*math.pi)*std))*(math.e**(-((x-mean)**2)/(2*(std)**2)))\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0.19496965572274114\n```\n:::\n:::\n\n\n## 2. Why the error occurs?\n\n### (1) Input error\n\n::: {#dd985a35 .cell execution_count=4}\n``` {.python .cell-code}\na=input(\"enter a number:\")\n\na+3\n```\n:::\n\n\ninput 값은 string타입으로 받게되므로, integer타입인 3과 더하기 연산을 하면 오류 발생, input 값을 받아 integer로 변환하여 integer간 연산을 하거나, 3을 string으로 변환하여 문자열간 연산을 하거나 해야함.\n\n### (2) Range error\n\n::: {#be80712d .cell execution_count=5}\n``` {.python .cell-code}\ntmp='My String'\ntmp[10]\n```\n:::\n\n\ntmp는 공백포함 9자리 문자열이므로 index는 0\\~8까지만 할 수 있고 9부터는 범위 밖이므로 오류 발생.\n\n### (3) method error\n\n::: {#461d52b5 .cell execution_count=6}\n``` {.python .cell-code}\nex1='sample string'\nex2=ex1.upper\nex2[:4]\n```\n:::\n\n\nmethod를 사용할 때, 뒤에 ()를 붙여야 작동함. 붙이지 않을경우 단순히 함수를 호출하는 것.\n\n## 3. String\n\n::: {#339250f0 .cell execution_count=7}\n``` {.python .cell-code}\ngrade='ABCDF'\n```\n:::\n\n\n### (1) '+'를 이용해서 'ABCDFFFDCBA' 만들기\n\n::: {#e9a26965 .cell execution_count=8}\n``` {.python .cell-code}\ngrade_str=grade+grade[-1]+grade[::-1]\ngrade_str\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'ABCDFFFDCBA'\n```\n:::\n:::\n\n\n### (2) A의 개수\n\n::: {#01b118f1 .cell execution_count=9}\n``` {.python .cell-code}\ngrade_str.count('A')\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n2\n```\n:::\n:::\n\n\n### (3) 'FFF'를 반환하는 4가지 다른 표현식\n\n::: {#4273fdf5 .cell execution_count=10}\n``` {.python .cell-code}\nprint(\n    grade_str[4:7],\n    grade_str[6:3:-1],\n    grade_str[-7:-4],\n    grade_str[-5:-8:-1]\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFFF FFF FFF FFF\n```\n:::\n:::\n\n\n### (4) 'ABCDAAADCBA'로 수정하기\n\n::: {#1ab766ca .cell execution_count=11}\n``` {.python .cell-code}\ngrade_str=grade_str.replace('F','A')\ngrade_str\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n'ABCDAAADCBA'\n```\n:::\n:::\n\n\n### (5) 소문자로 모두 바꾸기\n\n::: {#20133970 .cell execution_count=12}\n``` {.python .cell-code}\ngrade_str=grade_str.lower()\ngrade_str\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n'abcdaaadcba'\n```\n:::\n:::\n\n\n## 4. Why the error occurs?\n\n### (1) slicing 반환 형식\n\n::: {#abdb437a .cell execution_count=13}\n``` {.python .cell-code}\nL=[[1,3,5,7,9],[2,4,6,8,10]]\nL[0][1:2]=30\n```\n:::\n\n\nlist를 원소로 가지는 list에서 slicing하는 경우, output은 list로 나타나게 되는데, list에 integer 30을 할당하려고 하므로 오류가 발생함.\n\n30을 list로 만들어 할당하거나, slicing 대신 indexing을 통해 output을 integer로 만드는 방법을 사용해야 함.\n\n### (2) 단일 원소 tuple 표현\n\n::: {#30fce945 .cell execution_count=14}\n``` {.python .cell-code}\nT=(10,20,30)\nT[:2]+(40)\n```\n:::\n\n\ntuple에 더하기를 사용하는 경우인데, (40)은 tuple이 아니라 integer이므로 오류가 발생함. 단일 원소를 가지는 tuple을 표현하려면 (40,)으로 써야함.\n\n### (3) 변수 할당 labeling vs. copy\n\n::: {#62b04072 .cell execution_count=15}\n``` {.python .cell-code}\nD=dict(A=10,B=20,C=30)\n# Copy method를 써야 복사본이 할당됨\n# D2=D.copy()\nD2=D\ndel D2['A']\nD['A']\n```\n:::\n\n\nD2=D는 D2에 D.copy가 할당되는게 아니라 단순히 D에 D2라는 label만 새로 달아준것임. 따라서, D2에 'A' key를 제거하면 D의 'A' key도 사라지게 되므로 호출시 오류 발생.\n\n### (4) Key값은 Immutable 해야함\n\n::: {#17bbde1d .cell execution_count=16}\n``` {.python .cell-code}\nD3={['Park','Male']:30,}\n```\n:::\n\n\nDictionary 타입의 key값은 immutable한 값만 허용되므로 mutable한 list를 사용하면 오류 발생. tuple을 쓰던지 해야함.\n\n### (5) slicing&indexing for Dict\n\n::: {#ce3db572 .cell execution_count=17}\n``` {.python .cell-code}\ndict_y={(1,):10,(2,):20,(3,):30,(4,):40}\ndict_y[(1,)]\n```\n:::\n\n\nDictionary은 순서가 없음. slicing이 불가하며 indexing도 key값으로만 접근 가능.\n\n## 5. List\n\n::: {#ef2f7275 .cell execution_count=18}\n``` {.python .cell-code}\ndays=['Mon','Tues','Wed','Thur','Fri',['Sat','Sun']]\n```\n:::\n\n\n### (1) indexing, slicing\n\n::: {#5bc70596 .cell execution_count=19}\n``` {.python .cell-code}\nprint(\n    [days[5]],\n    days[-1::-2],\n    days[5][0],\n    sep='\\n'\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[['Sat', 'Sun']]\n[['Sat', 'Sun'], 'Thur', 'Tues']\nSat\n```\n:::\n:::\n\n\n### (2) '+' 활용\n\n::: {#3784bd1d .cell execution_count=20}\n``` {.python .cell-code}\ndays2=[days[0:5]]+days[5][0:1]+days[5][1:]\ndays2\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n[['Mon', 'Tues', 'Wed', 'Thur', 'Fri'], 'Sat', 'Sun']\n```\n:::\n:::\n\n\n### (3) remove method\n\n::: {#67dc0126 .cell execution_count=21}\n``` {.python .cell-code}\ndays2[0].remove('Wed')\ndays2[0].remove('Fri')\ndays2\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n[['Mon', 'Tues', 'Thur'], 'Sat', 'Sun']\n```\n:::\n:::\n\n\n### (4) insert method\n\n::: {#fe606de6 .cell execution_count=22}\n``` {.python .cell-code}\ndays2[0].insert(2,'W')\ndays2\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n[['Mon', 'Tues', 'W', 'Thur'], 'Sat', 'Sun']\n```\n:::\n:::\n\n\n## 6. list2\n\n::: {#4af0cb46 .cell execution_count=23}\n``` {.python .cell-code}\nNums=[1,5,2,7,3,6,4]\n```\n:::\n\n\n### (1) append method\n\n::: {#9094480b .cell execution_count=24}\n``` {.python .cell-code}\nNums.append(7)\nNums\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n[1, 5, 2, 7, 3, 6, 4, 7]\n```\n:::\n:::\n\n\n### (2) sorting list\n\n::: {#da5342ed .cell execution_count=25}\n``` {.python .cell-code}\nNums.sort()\nNums.reverse()\nNums\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n[7, 7, 6, 5, 4, 3, 2, 1]\n```\n:::\n:::\n\n\n### (3) slicing and replacing\n\n::: {#19d3c5e8 .cell execution_count=26}\n``` {.python .cell-code}\nNums[::2]=['a','a','a','a']\nNums\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n['a', 7, 'a', 5, 'a', 3, 'a', 1]\n```\n:::\n:::\n\n\n## 7. tuple\n\n::: {#cf2dbcc3 .cell execution_count=27}\n``` {.python .cell-code}\nprice=(180,130,110,160,140,170)\n```\n:::\n\n\n### (1) sorting tuple via translate to list\n\n::: {#f8404de0 .cell execution_count=28}\n``` {.python .cell-code}\nprice_list=list(price)\nprice_list.sort()\nprice=tuple(price_list)\nprice\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n(110, 130, 140, 160, 170, 180)\n```\n:::\n:::\n\n\n### (2) basic operation\n\n::: {#04edcdfb .cell execution_count=29}\n``` {.python .cell-code}\n170 in price\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nTrue\n```\n:::\n:::\n\n\n### (3) concatenating tuple\n\n::: {#0b623013 .cell execution_count=30}\n``` {.python .cell-code}\nprice=price[0:4]+(0,)*3+price[len(price)-1:]\nprice\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n(110, 130, 140, 160, 0, 0, 0, 180)\n```\n:::\n:::\n\n\n",
    "supporting": [
      "Python Quiz1_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}