{
  "hash": "896fe2144db7f74c34fdc4dc15ce178a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: '금융공학프로그래밍3, Quiz3'\n---\n\n\n\n## 1. Calculate the following by using 'while' loop.\n\n$$\\sum_{i\\geq 1, i^4<1000}^{10}i^4$$\n\n\n::: {#6a03a23c .cell execution_count=1}\n``` {.python .cell-code}\ni=1\nsum_i4=0\nwhile i>=1 and i**4<1000 and i<=10:\n    sum_i4+=i**4\n    i+=1\nsum_i4\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n979\n```\n:::\n:::\n\n\n## 2. List comprehension\n\n::: {#11c53933 .cell execution_count=2}\n``` {.python .cell-code}\nx=[1,2,3,4]\ny=[5,6,7,8]\n```\n:::\n\n\n### (1) Cartesian product\n\n::: {#7c7a7c4a .cell execution_count=3}\n``` {.python .cell-code}\nz=list([i,j] for i in x for j in y)\nz\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n[[1, 5],\n [1, 6],\n [1, 7],\n [1, 8],\n [2, 5],\n [2, 6],\n [2, 7],\n [2, 8],\n [3, 5],\n [3, 6],\n [3, 7],\n [3, 8],\n [4, 5],\n [4, 6],\n [4, 7],\n [4, 8]]\n```\n:::\n:::\n\n\n### (2) Cartesian product with condition\n\n::: {#057e090d .cell execution_count=4}\n``` {.python .cell-code}\nz=list([i,j] for i in x for j in y if i+j>=8)\nz\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n[[1, 7],\n [1, 8],\n [2, 6],\n [2, 7],\n [2, 8],\n [3, 5],\n [3, 6],\n [3, 7],\n [3, 8],\n [4, 5],\n [4, 6],\n [4, 7],\n [4, 8]]\n```\n:::\n:::\n\n\n## 3. Function\n\n::: {#20cf3f49 .cell execution_count=5}\n``` {.python .cell-code}\ndef grading (score):\n    if type(score)!=int and type(score)!=float:\n        print(\"Score must be integer or float type.\")\n    elif score>100 or score<0:\n        print(\"Score must be a number between 0 and 100!!\")\n    elif score>90:\n        print(\"Grade is A !\")\n    elif score>80:\n        print(\"Grade is B !\")\n    elif score>70:\n        print(\"Grade is C !\")\n    elif score>60:\n        print(\"Grade is D !\")\n    else:\n        print(\"Grade is F !\")\n```\n:::\n\n\n::: {#5240b164 .cell execution_count=6}\n``` {.python .cell-code}\ngrading(score=75)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGrade is C !\n```\n:::\n:::\n\n\n::: {#72498f68 .cell execution_count=7}\n``` {.python .cell-code}\ngrading(score=-5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nScore must be a number between 0 and 100!!\n```\n:::\n:::\n\n\n## 4. Explain why the error occurs\n\n(1) positional argument와 keyword argument를 혼용하는 경우, positional argument가 먼저 와야합니다. keyword argument를 먼저 사용하는 경우 오류가 발생합니다.\n\n::: {#96ad0fbc .cell execution_count=8}\n``` {.python .cell-code}\ndef infoprint( name, age, gender):\n    print(name, 'is', age, 'years old', gender, '.')\n\ninfoprint (name='Kim', 30, 'male')\n```\n:::\n\n\n(2) 'Kim'은 positional argument로 name에 할당, 'male'은 keyword로 gender에 할당되고 age는 할당값이 없어서 오류가 발생하였습니다. 함수 정의시 age는 default값을 정의하지 않았으므로 반드시 값을 할당해야 합니다.\n\n::: {#b69a791b .cell execution_count=9}\n``` {.python .cell-code}\ndef infoprint( name, age, gender):\n    print(name, 'is', age, 'years old', gender, '.')\n\ninfoprint ( 'Kim', gender='male' )\n```\n:::\n\n\n(3) 함수 myfactorial 정의시 변수 fac을 사용하는데, 해당 변수는 함수 안에서 정의된바 없으므로 함수 밖에서 정의된 global variable인 fac을 가져와서 사용하게 됩니다. 그러나, 이런 경우 global variable의 읽기만 가능하고 쓰기는 불가능하므로 for문 내에 fac을 수정하는 것은 허용되지 않습니다.\n\n::: {#e675c7c7 .cell execution_count=10}\n``` {.python .cell-code}\nfac = 1\ndef myfactorial(n):\n    for i in range(n):\n         fac *= i+1\n    return fac\n\nmyfactorial(n=5)\n```\n:::\n\n\n",
    "supporting": [
      "Python Quiz3_files"
    ],
    "filters": [],
    "includes": {}
  }
}